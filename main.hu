#pragma once

#define MAX_QUEUE 32
#define MAX_DENDRITES 100

#include <iostream>
#include <string>
#include <cmath>

#include <ctime>
#include <curand.h>
#include <curand_kernel.h>

using namespace std;

class Connection;
class Neuron;

__device__ float Connection__time_step (float**);
__device__ void Neuron__time_step (float**);
__device__ void Neuron__adjust_state (float*, float);
__device__ float Neuron__get_state (float*);

__global__ void time_step_single_connection (float**);
__global__ void adjust_state_single_neuron (float*, float);
__global__ void time_step_single_neuron (float**);
__global__ void Brain__time_step_connections (int*, float***);
__global__ void Brain__time_step_neurons (int*, float***, int*);

__global__ void Brain__shake_connections (int*, float***, float, curandState*, unsigned long);
__global__ void Brain__feedback_connections (int*, float***, float);

class Connection {
public:
    Neuron* connected_neuron;
    float** memblock; // stores device addresses to all data
    float* memblock_buffer; // stores data continuously on device
    float* connected_neuron_state;
    float* multiplier;
    float* delay; //delay in cycles
    float* state_queue;
    __host__ Connection(Neuron*);
    __host__ ~Connection();
    //__device__ float time_step ();
    __host__ friend ostream& operator<< (ostream&, const Connection&);
};

class Neuron {
public:
    string* name;
    Connection** dendrites;
    float** memblock; // stores device addresses to all data
    float* memblock_buffer; // stores data continuously on device
    float* state;
    float* decay_rate;
    float* n_dendrites;
    float** dendrites_states;
    __host__ Neuron (string _name, float _state=0., float _decay_rate=10.);
    __host__ ~Neuron ();
    __host__ void attach_dendrite (Neuron*);
    __host__ friend ostream& operator<< (ostream&, const Neuron&);
};

class Brain {
public:
    string* name;
    Connection** connections;
    Neuron** neurons;
    Neuron** input_neurons;
    Neuron** output_neurons;
    int* n_connections;
    float*** connection_memblocks;
    int* n_neurons;
    float*** neuron_memblocks;
    int* n_inputs;
    float** input_states;
    int* n_outputs;
    float** output_states;
    __host__ Brain (string, int, int, int _n_inputs=0, int _n_outputs=0, float max_init_state=0., float max_init_delay=10.);
    __host__ ~Brain ();
    __host__ friend ostream& operator<< (ostream&, const Brain&);
    __host__ void print_output ();
};